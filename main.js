/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/js-md5/src/md5.js
var require_md5 = __commonJS({
  "node_modules/js-md5/src/md5.js"(exports, module2) {
    (function() {
      "use strict";
      var INPUT_ERROR = "input is invalid type";
      var FINALIZE_ERROR = "finalize already called";
      var WINDOW = typeof window === "object";
      var root = WINDOW ? window : {};
      if (root.JS_MD5_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === "object";
      var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
      if (NODE_JS) {
        root = global;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module2 === "object" && module2.exports;
      var AMD = typeof define === "function" && define.amd;
      var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
      var HEX_CHARS = "0123456789abcdef".split("");
      var EXTRA = [128, 32768, 8388608, -2147483648];
      var SHIFT = [0, 8, 16, 24];
      var OUTPUT_TYPES = ["hex", "array", "digest", "buffer", "arrayBuffer", "base64"];
      var BASE64_ENCODE_CHAR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
      var blocks = [], buffer8;
      if (ARRAY_BUFFER) {
        var buffer = new ArrayBuffer(68);
        buffer8 = new Uint8Array(buffer);
        blocks = new Uint32Array(buffer);
      }
      var isArray = Array.isArray;
      if (root.JS_MD5_NO_NODE_JS || !isArray) {
        isArray = function(obj) {
          return Object.prototype.toString.call(obj) === "[object Array]";
        };
      }
      var isView = ArrayBuffer.isView;
      if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !isView)) {
        isView = function(obj) {
          return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }
      var formatMessage = function(message) {
        var type = typeof message;
        if (type === "string") {
          return [message, true];
        }
        if (type !== "object" || message === null) {
          throw new Error(INPUT_ERROR);
        }
        if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
          return [new Uint8Array(message), false];
        }
        if (!isArray(message) && !isView(message)) {
          throw new Error(INPUT_ERROR);
        }
        return [message, false];
      };
      var createOutputMethod = function(outputType) {
        return function(message) {
          return new Md5(true).update(message)[outputType]();
        };
      };
      var createMethod = function() {
        var method = createOutputMethod("hex");
        if (NODE_JS) {
          method = nodeWrap(method);
        }
        method.create = function() {
          return new Md5();
        };
        method.update = function(message) {
          return method.create().update(message);
        };
        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
          var type = OUTPUT_TYPES[i];
          method[type] = createOutputMethod(type);
        }
        return method;
      };
      var nodeWrap = function(method) {
        var crypto = require("crypto");
        var Buffer2 = require("buffer").Buffer;
        var bufferFrom;
        if (Buffer2.from && !root.JS_MD5_NO_BUFFER_FROM) {
          bufferFrom = Buffer2.from;
        } else {
          bufferFrom = function(message) {
            return new Buffer2(message);
          };
        }
        var nodeMethod = function(message) {
          if (typeof message === "string") {
            return crypto.createHash("md5").update(message, "utf8").digest("hex");
          } else {
            if (message === null || message === void 0) {
              throw new Error(INPUT_ERROR);
            } else if (message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            }
          }
          if (isArray(message) || isView(message) || message.constructor === Buffer2) {
            return crypto.createHash("md5").update(bufferFrom(message)).digest("hex");
          } else {
            return method(message);
          }
        };
        return nodeMethod;
      };
      var createHmacOutputMethod = function(outputType) {
        return function(key, message) {
          return new HmacMd5(key, true).update(message)[outputType]();
        };
      };
      var createHmacMethod = function() {
        var method = createHmacOutputMethod("hex");
        method.create = function(key) {
          return new HmacMd5(key);
        };
        method.update = function(key, message) {
          return method.create(key).update(message);
        };
        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
          var type = OUTPUT_TYPES[i];
          method[type] = createHmacOutputMethod(type);
        }
        return method;
      };
      function Md5(sharedMemory) {
        if (sharedMemory) {
          blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
          this.blocks = blocks;
          this.buffer8 = buffer8;
        } else {
          if (ARRAY_BUFFER) {
            var buffer2 = new ArrayBuffer(68);
            this.buffer8 = new Uint8Array(buffer2);
            this.blocks = new Uint32Array(buffer2);
          } else {
            this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
          }
        }
        this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;
        this.finalized = this.hashed = false;
        this.first = true;
      }
      Md5.prototype.update = function(message) {
        if (this.finalized) {
          throw new Error(FINALIZE_ERROR);
        }
        var result = formatMessage(message);
        message = result[0];
        var isString = result[1];
        var code, index = 0, i, length = message.length, blocks2 = this.blocks;
        var buffer82 = this.buffer8;
        while (index < length) {
          if (this.hashed) {
            this.hashed = false;
            blocks2[0] = blocks2[16];
            blocks2[16] = blocks2[1] = blocks2[2] = blocks2[3] = blocks2[4] = blocks2[5] = blocks2[6] = blocks2[7] = blocks2[8] = blocks2[9] = blocks2[10] = blocks2[11] = blocks2[12] = blocks2[13] = blocks2[14] = blocks2[15] = 0;
          }
          if (isString) {
            if (ARRAY_BUFFER) {
              for (i = this.start; index < length && i < 64; ++index) {
                code = message.charCodeAt(index);
                if (code < 128) {
                  buffer82[i++] = code;
                } else if (code < 2048) {
                  buffer82[i++] = 192 | code >>> 6;
                  buffer82[i++] = 128 | code & 63;
                } else if (code < 55296 || code >= 57344) {
                  buffer82[i++] = 224 | code >>> 12;
                  buffer82[i++] = 128 | code >>> 6 & 63;
                  buffer82[i++] = 128 | code & 63;
                } else {
                  code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
                  buffer82[i++] = 240 | code >>> 18;
                  buffer82[i++] = 128 | code >>> 12 & 63;
                  buffer82[i++] = 128 | code >>> 6 & 63;
                  buffer82[i++] = 128 | code & 63;
                }
              }
            } else {
              for (i = this.start; index < length && i < 64; ++index) {
                code = message.charCodeAt(index);
                if (code < 128) {
                  blocks2[i >>> 2] |= code << SHIFT[i++ & 3];
                } else if (code < 2048) {
                  blocks2[i >>> 2] |= (192 | code >>> 6) << SHIFT[i++ & 3];
                  blocks2[i >>> 2] |= (128 | code & 63) << SHIFT[i++ & 3];
                } else if (code < 55296 || code >= 57344) {
                  blocks2[i >>> 2] |= (224 | code >>> 12) << SHIFT[i++ & 3];
                  blocks2[i >>> 2] |= (128 | code >>> 6 & 63) << SHIFT[i++ & 3];
                  blocks2[i >>> 2] |= (128 | code & 63) << SHIFT[i++ & 3];
                } else {
                  code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
                  blocks2[i >>> 2] |= (240 | code >>> 18) << SHIFT[i++ & 3];
                  blocks2[i >>> 2] |= (128 | code >>> 12 & 63) << SHIFT[i++ & 3];
                  blocks2[i >>> 2] |= (128 | code >>> 6 & 63) << SHIFT[i++ & 3];
                  blocks2[i >>> 2] |= (128 | code & 63) << SHIFT[i++ & 3];
                }
              }
            }
          } else {
            if (ARRAY_BUFFER) {
              for (i = this.start; index < length && i < 64; ++index) {
                buffer82[i++] = message[index];
              }
            } else {
              for (i = this.start; index < length && i < 64; ++index) {
                blocks2[i >>> 2] |= message[index] << SHIFT[i++ & 3];
              }
            }
          }
          this.lastByteIndex = i;
          this.bytes += i - this.start;
          if (i >= 64) {
            this.start = i - 64;
            this.hash();
            this.hashed = true;
          } else {
            this.start = i;
          }
        }
        if (this.bytes > 4294967295) {
          this.hBytes += this.bytes / 4294967296 << 0;
          this.bytes = this.bytes % 4294967296;
        }
        return this;
      };
      Md5.prototype.finalize = function() {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks2 = this.blocks, i = this.lastByteIndex;
        blocks2[i >>> 2] |= EXTRA[i & 3];
        if (i >= 56) {
          if (!this.hashed) {
            this.hash();
          }
          blocks2[0] = blocks2[16];
          blocks2[16] = blocks2[1] = blocks2[2] = blocks2[3] = blocks2[4] = blocks2[5] = blocks2[6] = blocks2[7] = blocks2[8] = blocks2[9] = blocks2[10] = blocks2[11] = blocks2[12] = blocks2[13] = blocks2[14] = blocks2[15] = 0;
        }
        blocks2[14] = this.bytes << 3;
        blocks2[15] = this.hBytes << 3 | this.bytes >>> 29;
        this.hash();
      };
      Md5.prototype.hash = function() {
        var a, b, c, d, bc, da, blocks2 = this.blocks;
        if (this.first) {
          a = blocks2[0] - 680876937;
          a = (a << 7 | a >>> 25) - 271733879 << 0;
          d = (-1732584194 ^ a & 2004318071) + blocks2[1] - 117830708;
          d = (d << 12 | d >>> 20) + a << 0;
          c = (-271733879 ^ d & (a ^ -271733879)) + blocks2[2] - 1126478375;
          c = (c << 17 | c >>> 15) + d << 0;
          b = (a ^ c & (d ^ a)) + blocks2[3] - 1316259209;
          b = (b << 22 | b >>> 10) + c << 0;
        } else {
          a = this.h0;
          b = this.h1;
          c = this.h2;
          d = this.h3;
          a += (d ^ b & (c ^ d)) + blocks2[0] - 680876936;
          a = (a << 7 | a >>> 25) + b << 0;
          d += (c ^ a & (b ^ c)) + blocks2[1] - 389564586;
          d = (d << 12 | d >>> 20) + a << 0;
          c += (b ^ d & (a ^ b)) + blocks2[2] + 606105819;
          c = (c << 17 | c >>> 15) + d << 0;
          b += (a ^ c & (d ^ a)) + blocks2[3] - 1044525330;
          b = (b << 22 | b >>> 10) + c << 0;
        }
        a += (d ^ b & (c ^ d)) + blocks2[4] - 176418897;
        a = (a << 7 | a >>> 25) + b << 0;
        d += (c ^ a & (b ^ c)) + blocks2[5] + 1200080426;
        d = (d << 12 | d >>> 20) + a << 0;
        c += (b ^ d & (a ^ b)) + blocks2[6] - 1473231341;
        c = (c << 17 | c >>> 15) + d << 0;
        b += (a ^ c & (d ^ a)) + blocks2[7] - 45705983;
        b = (b << 22 | b >>> 10) + c << 0;
        a += (d ^ b & (c ^ d)) + blocks2[8] + 1770035416;
        a = (a << 7 | a >>> 25) + b << 0;
        d += (c ^ a & (b ^ c)) + blocks2[9] - 1958414417;
        d = (d << 12 | d >>> 20) + a << 0;
        c += (b ^ d & (a ^ b)) + blocks2[10] - 42063;
        c = (c << 17 | c >>> 15) + d << 0;
        b += (a ^ c & (d ^ a)) + blocks2[11] - 1990404162;
        b = (b << 22 | b >>> 10) + c << 0;
        a += (d ^ b & (c ^ d)) + blocks2[12] + 1804603682;
        a = (a << 7 | a >>> 25) + b << 0;
        d += (c ^ a & (b ^ c)) + blocks2[13] - 40341101;
        d = (d << 12 | d >>> 20) + a << 0;
        c += (b ^ d & (a ^ b)) + blocks2[14] - 1502002290;
        c = (c << 17 | c >>> 15) + d << 0;
        b += (a ^ c & (d ^ a)) + blocks2[15] + 1236535329;
        b = (b << 22 | b >>> 10) + c << 0;
        a += (c ^ d & (b ^ c)) + blocks2[1] - 165796510;
        a = (a << 5 | a >>> 27) + b << 0;
        d += (b ^ c & (a ^ b)) + blocks2[6] - 1069501632;
        d = (d << 9 | d >>> 23) + a << 0;
        c += (a ^ b & (d ^ a)) + blocks2[11] + 643717713;
        c = (c << 14 | c >>> 18) + d << 0;
        b += (d ^ a & (c ^ d)) + blocks2[0] - 373897302;
        b = (b << 20 | b >>> 12) + c << 0;
        a += (c ^ d & (b ^ c)) + blocks2[5] - 701558691;
        a = (a << 5 | a >>> 27) + b << 0;
        d += (b ^ c & (a ^ b)) + blocks2[10] + 38016083;
        d = (d << 9 | d >>> 23) + a << 0;
        c += (a ^ b & (d ^ a)) + blocks2[15] - 660478335;
        c = (c << 14 | c >>> 18) + d << 0;
        b += (d ^ a & (c ^ d)) + blocks2[4] - 405537848;
        b = (b << 20 | b >>> 12) + c << 0;
        a += (c ^ d & (b ^ c)) + blocks2[9] + 568446438;
        a = (a << 5 | a >>> 27) + b << 0;
        d += (b ^ c & (a ^ b)) + blocks2[14] - 1019803690;
        d = (d << 9 | d >>> 23) + a << 0;
        c += (a ^ b & (d ^ a)) + blocks2[3] - 187363961;
        c = (c << 14 | c >>> 18) + d << 0;
        b += (d ^ a & (c ^ d)) + blocks2[8] + 1163531501;
        b = (b << 20 | b >>> 12) + c << 0;
        a += (c ^ d & (b ^ c)) + blocks2[13] - 1444681467;
        a = (a << 5 | a >>> 27) + b << 0;
        d += (b ^ c & (a ^ b)) + blocks2[2] - 51403784;
        d = (d << 9 | d >>> 23) + a << 0;
        c += (a ^ b & (d ^ a)) + blocks2[7] + 1735328473;
        c = (c << 14 | c >>> 18) + d << 0;
        b += (d ^ a & (c ^ d)) + blocks2[12] - 1926607734;
        b = (b << 20 | b >>> 12) + c << 0;
        bc = b ^ c;
        a += (bc ^ d) + blocks2[5] - 378558;
        a = (a << 4 | a >>> 28) + b << 0;
        d += (bc ^ a) + blocks2[8] - 2022574463;
        d = (d << 11 | d >>> 21) + a << 0;
        da = d ^ a;
        c += (da ^ b) + blocks2[11] + 1839030562;
        c = (c << 16 | c >>> 16) + d << 0;
        b += (da ^ c) + blocks2[14] - 35309556;
        b = (b << 23 | b >>> 9) + c << 0;
        bc = b ^ c;
        a += (bc ^ d) + blocks2[1] - 1530992060;
        a = (a << 4 | a >>> 28) + b << 0;
        d += (bc ^ a) + blocks2[4] + 1272893353;
        d = (d << 11 | d >>> 21) + a << 0;
        da = d ^ a;
        c += (da ^ b) + blocks2[7] - 155497632;
        c = (c << 16 | c >>> 16) + d << 0;
        b += (da ^ c) + blocks2[10] - 1094730640;
        b = (b << 23 | b >>> 9) + c << 0;
        bc = b ^ c;
        a += (bc ^ d) + blocks2[13] + 681279174;
        a = (a << 4 | a >>> 28) + b << 0;
        d += (bc ^ a) + blocks2[0] - 358537222;
        d = (d << 11 | d >>> 21) + a << 0;
        da = d ^ a;
        c += (da ^ b) + blocks2[3] - 722521979;
        c = (c << 16 | c >>> 16) + d << 0;
        b += (da ^ c) + blocks2[6] + 76029189;
        b = (b << 23 | b >>> 9) + c << 0;
        bc = b ^ c;
        a += (bc ^ d) + blocks2[9] - 640364487;
        a = (a << 4 | a >>> 28) + b << 0;
        d += (bc ^ a) + blocks2[12] - 421815835;
        d = (d << 11 | d >>> 21) + a << 0;
        da = d ^ a;
        c += (da ^ b) + blocks2[15] + 530742520;
        c = (c << 16 | c >>> 16) + d << 0;
        b += (da ^ c) + blocks2[2] - 995338651;
        b = (b << 23 | b >>> 9) + c << 0;
        a += (c ^ (b | ~d)) + blocks2[0] - 198630844;
        a = (a << 6 | a >>> 26) + b << 0;
        d += (b ^ (a | ~c)) + blocks2[7] + 1126891415;
        d = (d << 10 | d >>> 22) + a << 0;
        c += (a ^ (d | ~b)) + blocks2[14] - 1416354905;
        c = (c << 15 | c >>> 17) + d << 0;
        b += (d ^ (c | ~a)) + blocks2[5] - 57434055;
        b = (b << 21 | b >>> 11) + c << 0;
        a += (c ^ (b | ~d)) + blocks2[12] + 1700485571;
        a = (a << 6 | a >>> 26) + b << 0;
        d += (b ^ (a | ~c)) + blocks2[3] - 1894986606;
        d = (d << 10 | d >>> 22) + a << 0;
        c += (a ^ (d | ~b)) + blocks2[10] - 1051523;
        c = (c << 15 | c >>> 17) + d << 0;
        b += (d ^ (c | ~a)) + blocks2[1] - 2054922799;
        b = (b << 21 | b >>> 11) + c << 0;
        a += (c ^ (b | ~d)) + blocks2[8] + 1873313359;
        a = (a << 6 | a >>> 26) + b << 0;
        d += (b ^ (a | ~c)) + blocks2[15] - 30611744;
        d = (d << 10 | d >>> 22) + a << 0;
        c += (a ^ (d | ~b)) + blocks2[6] - 1560198380;
        c = (c << 15 | c >>> 17) + d << 0;
        b += (d ^ (c | ~a)) + blocks2[13] + 1309151649;
        b = (b << 21 | b >>> 11) + c << 0;
        a += (c ^ (b | ~d)) + blocks2[4] - 145523070;
        a = (a << 6 | a >>> 26) + b << 0;
        d += (b ^ (a | ~c)) + blocks2[11] - 1120210379;
        d = (d << 10 | d >>> 22) + a << 0;
        c += (a ^ (d | ~b)) + blocks2[2] + 718787259;
        c = (c << 15 | c >>> 17) + d << 0;
        b += (d ^ (c | ~a)) + blocks2[9] - 343485551;
        b = (b << 21 | b >>> 11) + c << 0;
        if (this.first) {
          this.h0 = a + 1732584193 << 0;
          this.h1 = b - 271733879 << 0;
          this.h2 = c - 1732584194 << 0;
          this.h3 = d + 271733878 << 0;
          this.first = false;
        } else {
          this.h0 = this.h0 + a << 0;
          this.h1 = this.h1 + b << 0;
          this.h2 = this.h2 + c << 0;
          this.h3 = this.h3 + d << 0;
        }
      };
      Md5.prototype.hex = function() {
        this.finalize();
        var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;
        return HEX_CHARS[h0 >>> 4 & 15] + HEX_CHARS[h0 & 15] + HEX_CHARS[h0 >>> 12 & 15] + HEX_CHARS[h0 >>> 8 & 15] + HEX_CHARS[h0 >>> 20 & 15] + HEX_CHARS[h0 >>> 16 & 15] + HEX_CHARS[h0 >>> 28 & 15] + HEX_CHARS[h0 >>> 24 & 15] + HEX_CHARS[h1 >>> 4 & 15] + HEX_CHARS[h1 & 15] + HEX_CHARS[h1 >>> 12 & 15] + HEX_CHARS[h1 >>> 8 & 15] + HEX_CHARS[h1 >>> 20 & 15] + HEX_CHARS[h1 >>> 16 & 15] + HEX_CHARS[h1 >>> 28 & 15] + HEX_CHARS[h1 >>> 24 & 15] + HEX_CHARS[h2 >>> 4 & 15] + HEX_CHARS[h2 & 15] + HEX_CHARS[h2 >>> 12 & 15] + HEX_CHARS[h2 >>> 8 & 15] + HEX_CHARS[h2 >>> 20 & 15] + HEX_CHARS[h2 >>> 16 & 15] + HEX_CHARS[h2 >>> 28 & 15] + HEX_CHARS[h2 >>> 24 & 15] + HEX_CHARS[h3 >>> 4 & 15] + HEX_CHARS[h3 & 15] + HEX_CHARS[h3 >>> 12 & 15] + HEX_CHARS[h3 >>> 8 & 15] + HEX_CHARS[h3 >>> 20 & 15] + HEX_CHARS[h3 >>> 16 & 15] + HEX_CHARS[h3 >>> 28 & 15] + HEX_CHARS[h3 >>> 24 & 15];
      };
      Md5.prototype.toString = Md5.prototype.hex;
      Md5.prototype.digest = function() {
        this.finalize();
        var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;
        return [
          h0 & 255,
          h0 >>> 8 & 255,
          h0 >>> 16 & 255,
          h0 >>> 24 & 255,
          h1 & 255,
          h1 >>> 8 & 255,
          h1 >>> 16 & 255,
          h1 >>> 24 & 255,
          h2 & 255,
          h2 >>> 8 & 255,
          h2 >>> 16 & 255,
          h2 >>> 24 & 255,
          h3 & 255,
          h3 >>> 8 & 255,
          h3 >>> 16 & 255,
          h3 >>> 24 & 255
        ];
      };
      Md5.prototype.array = Md5.prototype.digest;
      Md5.prototype.arrayBuffer = function() {
        this.finalize();
        var buffer2 = new ArrayBuffer(16);
        var blocks2 = new Uint32Array(buffer2);
        blocks2[0] = this.h0;
        blocks2[1] = this.h1;
        blocks2[2] = this.h2;
        blocks2[3] = this.h3;
        return buffer2;
      };
      Md5.prototype.buffer = Md5.prototype.arrayBuffer;
      Md5.prototype.base64 = function() {
        var v1, v2, v3, base64Str = "", bytes = this.array();
        for (var i = 0; i < 15; ) {
          v1 = bytes[i++];
          v2 = bytes[i++];
          v3 = bytes[i++];
          base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] + BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] + BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] + BASE64_ENCODE_CHAR[v3 & 63];
        }
        v1 = bytes[i];
        base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] + BASE64_ENCODE_CHAR[v1 << 4 & 63] + "==";
        return base64Str;
      };
      function HmacMd5(key, sharedMemory) {
        var i, result = formatMessage(key);
        key = result[0];
        if (result[1]) {
          var bytes = [], length = key.length, index = 0, code;
          for (i = 0; i < length; ++i) {
            code = key.charCodeAt(i);
            if (code < 128) {
              bytes[index++] = code;
            } else if (code < 2048) {
              bytes[index++] = 192 | code >>> 6;
              bytes[index++] = 128 | code & 63;
            } else if (code < 55296 || code >= 57344) {
              bytes[index++] = 224 | code >>> 12;
              bytes[index++] = 128 | code >>> 6 & 63;
              bytes[index++] = 128 | code & 63;
            } else {
              code = 65536 + ((code & 1023) << 10 | key.charCodeAt(++i) & 1023);
              bytes[index++] = 240 | code >>> 18;
              bytes[index++] = 128 | code >>> 12 & 63;
              bytes[index++] = 128 | code >>> 6 & 63;
              bytes[index++] = 128 | code & 63;
            }
          }
          key = bytes;
        }
        if (key.length > 64) {
          key = new Md5(true).update(key).array();
        }
        var oKeyPad = [], iKeyPad = [];
        for (i = 0; i < 64; ++i) {
          var b = key[i] || 0;
          oKeyPad[i] = 92 ^ b;
          iKeyPad[i] = 54 ^ b;
        }
        Md5.call(this, sharedMemory);
        this.update(iKeyPad);
        this.oKeyPad = oKeyPad;
        this.inner = true;
        this.sharedMemory = sharedMemory;
      }
      HmacMd5.prototype = new Md5();
      HmacMd5.prototype.finalize = function() {
        Md5.prototype.finalize.call(this);
        if (this.inner) {
          this.inner = false;
          var innerHash = this.array();
          Md5.call(this, this.sharedMemory);
          this.update(this.oKeyPad);
          this.update(innerHash);
          Md5.prototype.finalize.call(this);
        }
      };
      var exports2 = createMethod();
      exports2.md5 = exports2;
      exports2.md5.hmac = createHmacMethod();
      if (COMMON_JS) {
        module2.exports = exports2;
      } else {
        root.md5 = exports2;
        if (AMD) {
          define(function() {
            return exports2;
          });
        }
      }
    })();
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Toolbox
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/helpers.ts
function today() {
  let date = new Date();
  let year = date.getFullYear().toString();
  let month = (date.getMonth() + 1).toString();
  let day = date.getDate().toString();
  if (month.length < 2) {
    month = "0" + month;
  }
  if (day.length < 2) {
    day = "0" + day;
  }
  let formattedDate = year + "-" + month + "-" + day;
  return formattedDate;
}
function sure(obj) {
  return obj.filter((o, i) => {
    if (typeof o === "string") {
      let d = obj[i + 1];
      if (i + 1 >= obj.length)
        return;
      if (typeof d === "string") {
        if (o.match(/(#*)/)[1].length < d.match(/(#*)/)[1].length) {
          return true;
        }
      } else {
        return true;
      }
    } else {
      return true;
    }
  });
}
function getBlock(app, editor, file) {
  const cursor = editor.getCursor("to");
  const fileCache = app.metadataCache.getFileCache(file);
  let block = ((fileCache === null || fileCache === void 0 ? void 0 : fileCache.sections) || []).find((section) => {
    return section.position.start.line <= cursor.line && section.position.end.line >= cursor.line;
  });
  if ((block === null || block === void 0 ? void 0 : block.type) === "list") {
    block = ((fileCache === null || fileCache === void 0 ? void 0 : fileCache.listItems) || []).find((item) => {
      return item.position.start.line <= cursor.line && item.position.end.line >= cursor.line;
    });
  } else if ((block === null || block === void 0 ? void 0 : block.type) === "heading") {
    block = fileCache.headings.find((heading) => {
      return heading.position.start.line === block.position.start.line;
    });
  }
  let blockId = block.id;
  if (!blockId) {
    const sectionEnd = block.position.end;
    const end = {
      ch: sectionEnd.col,
      line: sectionEnd.line
    };
    const id = generateId();
    const spacer = shouldInsertAfter(block) ? "\n\n" : " ";
    editor.replaceRange(`${spacer}^${id}`, end);
    blockId = id;
  }
  return blockId;
}
function generateId() {
  return Math.random().toString(36).substr(2, 6);
}
function shouldInsertAfter(block) {
  if (block.type) {
    return [
      "blockquote",
      "code",
      "table",
      "comment",
      "footnoteDefinition"
    ].includes(block.type);
  }
}

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  watch: true,
  folder: "\u4E66\u5E93",
  timeout: 1e3 * 60 * 5,
  delayTime: 1e3 * 3,
  filp: true,
  filpRevise: -80,
  readingNotes: true,
  readingNotesToFolder: "\u4E66\u5E93/\u8BFB\u4E66\u7B14\u8BB0",
  outlink: true,
  blockId: true,
  frontmatter: true,
  dailyQuite: true,
  dailyQuiteTo: "\u4E3B\u9875",
  polysemy: true,
  polysemyFolder: "\u5361\u7247\u76D2",
  createNoteToFolder: "\u5361\u7247\u76D2"
};
var ToolboxSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: this.plugin.manifest.name });
    new import_obsidian.Setting(containerEl).setName("\u23F1 \u8DDF\u8E2A\u9605\u8BFB\u65F6\u957F\u3001\u8FDB\u5EA6\u53CA\u72B6\u6001").setDesc("- \u6BCF\u672C\u4E66\u90FD\u662F\u5355\u4E2A markdown \u6587\u4EF6\uFF0C\u4E0D\u5EFA\u8BAE\u62C6\u5206\u7AE0\u8282\uFF0C\u4E0D\u8D85\u8FC7 2mb \n- \u653E\u81F3\u6307\u5B9A\u7684\u8DDF\u8E2A\u6839\u76EE\u5F55 \n- \u8BBE\u7F6E book \u6807\u7B7E").addToggle(
      (cd) => cd.setValue(this.plugin.settings.watch).onChange(async (value) => {
        this.plugin.settings.watch = value;
        await this.plugin.saveSettings();
        this.display();
      })
    );
    if (this.plugin.settings.watch) {
      new import_obsidian.Setting(containerEl).setName("\u8DDF\u8E2A\u76EE\u5F55").addText(
        (cd) => cd.setValue(this.plugin.settings.folder).onChange(async (value) => {
          this.plugin.settings.folder = value;
          await this.plugin.saveSettings();
        })
      );
      new import_obsidian.Setting(containerEl).setName("\u8D85\u65F6").setDesc(`\u8D85\u8FC7\u4E00\u6BB5\u65F6\u95F4\u672A\u7FFB\u9875\u5C06\u6682\u505C\u8DDF\u8E2A\uFF0C\u4EE5\u83B7\u5F97\u66F4\u51C6\u786E\u7684\u6570\u636E\u3002`).addText(
        (cd) => cd.setValue("" + this.plugin.settings.timeout / 1e3).onChange(async (value) => {
          this.plugin.settings.timeout = Number(value) * 1e3;
          await this.plugin.saveSettings();
        })
      );
      new import_obsidian.Setting(containerEl).setName("\u8DDF\u8E2A\u6570\u636E\u5EF6\u8FDF\u66F4\u65B0").setDesc("\u5728\u67D0\u4E9B\u8001\u65E7\u6C34\u58A8\u5C4F\u8BBE\u5907\u6216\u8005\u5355\u6587\u4EF6\u4F53\u79EF\u8FC7\u5927\uFF0C\u6BCF\u6B21\u66F4\u65B0\u8DDF\u8E2A\u6570\u636E\u90FD\u4F1A\u5BFC\u81F4\u7FFB\u9875\u660E\u663E\u6EDE\u540E\uFF0C\u8BBE\u7F6E\u5EF6\u8FDF\u4EE5\u5927\u5E45\u63D0\u5347\u7FFB\u9875\u6D41\u7545\u6027").addText(
        (text) => text.setValue("" + this.plugin.settings.delayTime / 1e3).onChange(async (value) => {
          this.plugin.settings.delayTime = Number(value) * 1e3;
          await this.plugin.saveSettings();
        })
      );
    }
    new import_obsidian.Setting(containerEl).setName("\u{1F447}\u{1F3FC} \u7FFB\u9875").addToggle(
      (cd) => cd.setValue(this.plugin.settings.filp).onChange(async (value) => {
        this.plugin.settings.filp = value;
        await this.plugin.saveSettings();
        this.display();
      })
    );
    if (this.plugin.settings.filp) {
      new import_obsidian.Setting(containerEl).setName("\u4FEE\u6B63\u503C").addText(
        (cd) => cd.setValue("" + this.plugin.settings.filpRevise).onChange(async (value) => {
          this.plugin.settings.filpRevise = Number(value);
          await this.plugin.saveSettings();
        })
      );
    }
    new import_obsidian.Setting(containerEl).setName("\u{1F4D3} \u8BFB\u4E66\u7B14\u8BB0").addToggle(
      (cd) => cd.setValue(this.plugin.settings.readingNotes).onChange(async (value) => {
        this.plugin.settings.readingNotes = value;
        await this.plugin.saveSettings();
        this.display();
      })
    );
    if (this.plugin.settings.readingNotes) {
      new import_obsidian.Setting(containerEl).setName("\u540C\u6B65\u81F3\u54EA\u4E2A\u76EE\u5F55").addText(
        (cd) => cd.setValue("" + this.plugin.settings.readingNotesToFolder).onChange(async (value) => {
          this.plugin.settings.readingNotesToFolder = value;
          await this.plugin.saveSettings();
        })
      );
      new import_obsidian.Setting(containerEl).setName("\u540C\u6B65\u51FA\u94FE").addToggle(
        (cd) => cd.setValue(this.plugin.settings.outlink).onChange(async (value) => {
          this.plugin.settings.outlink = value;
          await this.plugin.saveSettings();
        })
      );
      new import_obsidian.Setting(containerEl).setName("\u540C\u6B65\u5143\u5B57\u6BB5").setDesc("\u6BCF\u672C\u4E66\u6DFB\u52A0\u5212\u7EBF\uFF0C\u60F3\u6CD5\u548C\u51FA\u94FE\u6570\u91CF\u5143\u5B57\u6BB5").addToggle(
        (cd) => cd.setValue(this.plugin.settings.frontmatter).onChange(async (value) => {
          this.plugin.settings.frontmatter = value;
          await this.plugin.saveSettings();
        })
      );
      new import_obsidian.Setting(containerEl).setName("\u6DFB\u52A0\u5757id").setDesc("\u5728\u6BCF\u6761\u8BFB\u4E66\u7B14\u8BB0\u53E5\u5C3E\u6DFB\u52A0\u5757id\u3002\u5212\u7EBF\u5185\u5BB9\u4E0D\u66F4\u6539\uFF0Cid\u4E5F\u4E0D\u4F1A\u66F4\u6539\u3002\u56E0\u6B64\uFF0C\u53EF\u4EE5\u5728\u5176\u4ED6\u5730\u65B9\u5F15\u7528\u8BFB\u4E66\u7B14\u8BB0").addToggle(
        (cd) => cd.setValue(this.plugin.settings.blockId).onChange(async (value) => {
          this.plugin.settings.blockId = value;
          await this.plugin.saveSettings();
        })
      );
    }
    new import_obsidian.Setting(containerEl).setName("\u{1F397}\uFE0F \u5C55\u5385").addToggle(
      (cd) => cd.setValue(this.plugin.settings.dailyQuite).onChange(async (value) => {
        this.plugin.settings.dailyQuite = value;
        await this.plugin.saveSettings();
        this.display();
      })
    );
    if (this.plugin.settings.dailyQuite) {
      new import_obsidian.Setting(containerEl).setName("\u6307\u5B9A\u7B14\u8BB0").addText(
        (cd) => cd.setValue("" + this.plugin.settings.dailyQuiteTo).onChange(async (value) => {
          this.plugin.settings.dailyQuiteTo = value;
          await this.plugin.saveSettings();
        })
      );
    }
    new import_obsidian.Setting(containerEl).setName("\u{1F517} \u591A\u4E49\u7B14\u8BB0\u8F6C\u8DF3").addToggle(
      (cd) => cd.setValue(this.plugin.settings.polysemy).onChange(async (value) => {
        this.plugin.settings.polysemy = value;
        await this.plugin.saveSettings();
        this.display();
      })
    );
    if (this.plugin.settings.polysemy) {
      new import_obsidian.Setting(containerEl).setName("\u6307\u5B9A\u76EE\u5F55").addText(
        (cd) => cd.setValue("" + this.plugin.settings.polysemyFolder).onChange(async (value) => {
          this.plugin.settings.polysemyFolder = value;
          await this.plugin.saveSettings();
        })
      );
    }
    containerEl.createEl("h2", { text: "\u6307\u4EE4" });
    new import_obsidian.Setting(containerEl).setName("\u521B\u5EFA\u5361\u7247\u7B14\u8BB0\u653E\u81F3\u54EA\u4E2A\u6587\u4EF6\u5939").addText(
      (text) => text.setValue("" + this.plugin.settings.createNoteToFolder).onChange(async (value) => {
        this.plugin.settings.createNoteToFolder = value;
        await this.plugin.saveSettings();
      })
    );
  }
};

// src/InputBox.ts
var import_obsidian2 = require("obsidian");
var InputBox = class extends import_obsidian2.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    new import_obsidian2.Setting(contentEl).addText((text) => text.onChange((value) => {
      this.result = value;
    }));
    new import_obsidian2.Setting(contentEl).addButton((btn) => btn.setButtonText("\u5199\u60F3\u6CD5").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.result);
    }));
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};

// src/main.ts
var import_js_md5 = __toESM(require_md5());

// src/Confirm.ts
var import_obsidian3 = require("obsidian");
var Confirm = class extends import_obsidian3.Modal {
  constructor(app, text, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
    this.text = text;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: this.text });
    new import_obsidian3.Setting(contentEl).addButton((btn) => btn.setButtonText("\u786E\u8BA4").setCta().onClick(() => {
      this.close();
      this.onSubmit(true);
    })).addButton((btn) => btn.setButtonText("\u53D6\u6D88").setCta().onClick(() => {
      this.close();
      this.onSubmit(false);
    }));
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};

// src/main.ts
var OUTLINK_EXP = /\[\[(?!.*\.)[^\]]+\]\]/g;
var PREVIEW_VIEW_CLASS = ".markdown-preview-view";
var Toolbox = class extends import_obsidian4.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new ToolboxSettingTab(this.app, this));
    this.itemEl = this.addStatusBarItem().createEl("span", { text: "" });
    this.registerEvent(this.app.workspace.on("file-open", (file) => {
      if (!file || file.extension !== "md")
        return;
      if (file.path === this.settings.dailyQuiteTo + ".md")
        this.dailyQuite();
      if (file.parent.path === this.settings.polysemyFolder)
        this.polysemy(file);
      if (file.parent.path === this.settings.folder) {
        let startTime = Date.now();
        const view = this.getView();
        const viewEl = this.getviewEl(view);
        let { readingTime = 0, readingProgress = 0 } = this.app.metadataCache.getFileCache(file).frontmatter || {};
        this.updateStatusBar(readingTime, readingProgress);
        this.setReadingDate(file);
        this.setCompletionDate(file);
        viewEl.onclick = () => {
          if (view.getMode() === "source")
            return;
          this.filp(viewEl);
          if (!this.settings.watch)
            return;
          clearTimeout(this.timer);
          this.timer = window.setTimeout(() => {
            this.app.fileManager.processFrontMatter(file, (frontmatter) => {
              if (!frontmatter.readingTime)
                frontmatter.readingTime = 0;
              if (!frontmatter.readingProgress)
                frontmatter.readingProgress = 0;
              frontmatter.readingTime += Math.min(this.settings.timeout, Date.now() - startTime);
              startTime = Date.now();
              frontmatter.readingTimeFormat = this.msTo(frontmatter.readingTime);
              readingProgress = Number(((viewEl.scrollTop + viewEl.clientHeight) / viewEl.scrollHeight * 100).toFixed(2));
              if (viewEl.scrollHeight > 0 && frontmatter.readingProgress <= readingProgress)
                frontmatter.readingProgress = readingProgress;
              this.setCompletionDate(file);
              this.updateStatusBar(frontmatter.readingTime, frontmatter.readingProgress);
            });
          }, this.settings.delayTime);
        };
      } else {
        this.clearStatusBar();
      }
    }));
    this.settings.readingNotes && this.addCommand({
      id: "\u5212\u7EBF",
      name: "\u5212\u7EBF",
      icon: "brush",
      editorCallback: (editor, view) => this.highlight(editor, view)
    });
    this.settings.readingNotes && this.addCommand({
      id: "\u521B\u5EFA\u7B14\u8BB0",
      name: "\u521B\u5EFA\u7B14\u8BB0",
      icon: "book",
      editorCallback: (editor, view) => this.selectionByCreateNote(editor, view)
    });
    this.settings.watch && this.addCommand({
      id: "\u8F6C\u8DF3\u81F3\u9605\u8BFB\u8FDB\u5EA6\u4F4D\u7F6E",
      name: "\u8F6C\u8DF3\u81F3\u9605\u8BFB\u8FDB\u5EA6\u4F4D\u7F6E",
      icon: "album",
      callback: () => this.toReadingProgress()
    });
    this.settings.readingNotes && this.addCommand({
      id: "\u540C\u6B65\u8BFB\u4E66\u7B14\u8BB0",
      name: "\u540C\u6B65\u8BFB\u4E66\u7B14\u8BB0",
      icon: "activity",
      callback: () => this.app.vault.getMarkdownFiles().filter((file) => {
        var _a;
        return ((_a = file == null ? void 0 : file.parent) == null ? void 0 : _a.path) === this.settings.folder;
      }).filter((file) => {
        var _a, _b, _c;
        return (_c = (_b = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter) == null ? void 0 : _b.tags) == null ? void 0 : _c.contains("book");
      }).forEach((file) => this.syncNote(file))
    });
  }
  getviewEl(view) {
    return view.contentEl.querySelector(PREVIEW_VIEW_CLASS);
  }
  getView() {
    return this.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
  }
  async syncNote(file) {
    var _a, _b;
    if (file && file.extension !== "md" || file.parent.path !== this.settings.folder)
      return;
    let content = "---\ntags: \u8BFB\u4E66\u7B14\u8BB0\n---";
    let markdown = await this.app.vault.cachedRead(file);
    if (this.settings.outlink) {
      let outlinks = markdown.match(OUTLINK_EXP);
      outlinks && (content += `

# \u51FA\u94FE 

${outlinks.join(" / ")}`);
    }
    let bookReview = (_b = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter) == null ? void 0 : _b.bookReview;
    bookReview && (content += `

# \u4E66\u8BC4 

 > [!tip] ${bookReview}${this.settings.blockId ? " ^" + (0, import_js_md5.md5)(bookReview) : ""}`);
    let reslut = [].concat(markdown.match(/#(.*)|==(.+?)==/g)).filter(Boolean).map((p) => {
      if (/#.*/g.test(p))
        return p;
      let id = /%%\^(.*)\^%%/g.exec(p);
      let text = /==(.+?)(%%💬|%%\^)/g.exec(p);
      let idea = p.match(/%%💬(.+?)💬%%/g);
      return {
        id: id && id[1],
        text: text && text[1],
        idea: idea && idea.map((t) => t.replace(/%%💬|💬%%/g, ""))
      };
    });
    reslut = sure(reslut);
    reslut = sure(reslut);
    reslut = sure(reslut);
    reslut.length && (content += "\n\n# \u5212\u7EBF \n\n");
    reslut.forEach((o, i) => {
      if (typeof o === "string") {
        content += o + "\n\n";
      } else {
        content += `> [!quote] [${o.text}](${file.path}#^${o.id}) ${o.idea ? "\n> \u{1F4AC} " + o.idea.join("\n > \u{1F4AC} ") : ""}${this.settings.blockId ? " ^" + (0, import_js_md5.md5)(o.text) : ""}

`;
      }
    });
    const readingNotePath = this.settings.readingNotesToFolder + "/" + file.name;
    const readingNoteFile = this.app.vault.getAbstractFileByPath(readingNotePath);
    if (readingNoteFile) {
      const sourceContent = await this.app.vault.cachedRead(readingNoteFile);
      if (sourceContent !== content) {
        this.app.vault.modify(readingNoteFile, content);
        this.updateMetadata(file);
        this.notice(file.name + " - \u5DF2\u540C\u6B65");
      }
    } else {
      this.app.vault.create(readingNotePath, content);
      this.updateMetadata(file);
      this.notice(file.name + " - \u5DF2\u540C\u6B65");
    }
  }
  setReadingDate(file) {
    var _a;
    let readingDate = (_a = this.app.metadataCache.getFileCache(file).frontmatter) == null ? void 0 : _a.readingDate;
    if (readingDate || !this.settings.watch)
      return;
    new Confirm(this.app, `\u300A${file.basename}\u300B\u672A\u8FC7\u8BFB\uFF0C\u662F\u5426\u6807\u8BB0\u5728\u8BFB\uFF1F`, (res) => {
      res && this.updateFrontmatter(file, "readingDate", today());
    }).open();
  }
  setCompletionDate(file) {
    let { readingProgress = 0, completionDate } = this.app.metadataCache.getFileCache(file).frontmatter || {};
    if (readingProgress < 100 || completionDate || !this.settings.watch)
      return;
    new Confirm(this.app, `\u300A${file.basename}\u300B\u8FDB\u5EA6 100%\uFF0C\u662F\u5426\u6807\u8BB0\u8BFB\u5B8C\uFF1F`, (res) => {
      res && this.updateFrontmatter(file, "completionDate", today());
    }).open();
  }
  polysemy(file) {
    var _a, _b, _c;
    if (!this.settings.polysemy)
      return;
    const to = (_b = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter) == null ? void 0 : _b.to;
    if (to) {
      let filiname = (_c = to.match(/\[\[(.*)\]\]/)) == null ? void 0 : _c[1];
      let targetFile = this.openFile(this.settings.polysemyFolder + "/" + filiname + ".md");
      if (targetFile) {
        const view = this.app.workspace.getLeaf();
        const LastOpenFiles = this.app.workspace.getLastOpenFiles();
        if (LastOpenFiles[1] !== file.path) {
          view.openFile(targetFile);
          this.notice(`\u300A${file.basename}\u300B\u662F\u4E00\u7BC7\u591A\u4E49\u7B14\u8BB0\uFF0C\u5DF2\u8F6C\u8DF3\u81F3\u300A${filiname}\u300B `);
        }
      }
    }
  }
  updateMetadata(file) {
    if (this.settings.frontmatter) {
      this.updateOutlinkes(file);
      this.updateHighlightsAndThinks(file);
    }
  }
  updateFrontmatter(file, key, value) {
    this.app.fileManager.processFrontMatter(file, (frontmatter) => {
      frontmatter[key] = value;
    });
  }
  updateStatusBar(duration, progress) {
    this.itemEl.textContent = `${this.msTo(duration)} \u23F1\uFE0F ${progress}% \u23F3`;
  }
  msTo(t) {
    const seconds = Math.floor(t / 1e3 % 60);
    const minutes = Math.floor(t / (1e3 * 60) % 60);
    const hours = Math.floor(t / (1e3 * 60 * 60));
    return `${hours ? hours + "h" : ""}${minutes ? minutes + "m" : ""}${seconds ? seconds + "s" : ""}`;
  }
  async updateOutlinkes(file) {
    let content = await this.app.vault.cachedRead(file);
    let outlinks = content.match(OUTLINK_EXP) || [];
    this.updateFrontmatter(file, "outlinks", outlinks.length);
  }
  async updateHighlightsAndThinks(file) {
    let content = await this.app.vault.cachedRead(file);
    let highlights = content.match(/==(.+?)==/g) || [];
    let thinks = highlights.map((highlight) => {
      var _a;
      return (_a = highlight.match(/%%💬(.+?)💬%%/g)) == null ? void 0 : _a.length;
    }).filter(Boolean).reduce((a, b) => a + b, 0);
    this.updateFrontmatter(file, "highlights", highlights.length);
    this.updateFrontmatter(file, "thinks", thinks);
  }
  clearStatusBar() {
    this.itemEl.textContent = "";
  }
  filp(el) {
    this.settings.filp && (el.scrollTop += el.clientHeight + this.settings.filpRevise);
  }
  highlight(editor, view) {
    let selection = editor.getSelection();
    let blockId = getBlock(this.app, editor, view.file);
    new InputBox(this.app, async (res) => {
      res = res ? `%%\u{1F4AC}${res}\u{1F4AC}%%` : "";
      editor.replaceSelection(`==${selection}${res}%%^${blockId}^%%==`);
    }).open();
  }
  toReadingProgress() {
    var _a, _b;
    const view = this.getView();
    if (!view)
      return;
    const file = view.file;
    const readingProgress = file && ((_b = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter) == null ? void 0 : _b.readingProgress);
    const viewEl = this.getviewEl(view);
    if (readingProgress) {
      viewEl.scrollTo({ top: viewEl.scrollHeight * readingProgress / 100 });
      this.notice(`\u5DF2\u8F6C\u8DF3\u81F3 ${readingProgress} %`);
    }
  }
  async selectionByCreateNote(editor, view) {
    const filename = editor.getSelection();
    const filepath = this.settings.createNoteToFolder + "/" + filename + ".md";
    editor.replaceSelection(`[[${filename}|${filename}]]`);
    this.app.vault.create(filepath, "---\nempty: true\n---");
  }
  notice(text) {
    new import_obsidian4.Notice(text);
  }
  async dailyQuite() {
    var _a, _b;
    const file = this.openFile(this.settings.dailyQuiteTo + ".md");
    let content = await this.app.vault.cachedRead(file);
    const params = (_b = (_a = content == null ? void 0 : content.match(/%%(.*)%%/)) == null ? void 0 : _a[1]) == null ? void 0 : _b.split("|");
    let files = [];
    if (params[0] !== "quote")
      return;
    let sentences = (await Promise.all(this.app.vault.getMarkdownFiles().filter((file2) => file2.parent.path === this.settings.readingNotesToFolder).map((file2) => {
      files.push(file2);
      return this.app.vault.cachedRead(file2);
    }))).map((content2, i) => ({ text: content2.match(/> \[!quote\] \[.*?\]\(.*?\.md#\^.*?\)/gm) || [], file: files[i] })).filter(({ text: text2 }) => text2.length).map(({ text: text2, file: file2 }) => text2.map((text3) => ({ text: text3, file: file2 }))).flat(1);
    const text = this.pick(sentences, Number(params[1]) || 1).map(({ text: text2, file: file2 }) => text2.replace("> [!quote]", `> [!quote] [\u300A${file2.basename}\u300B](${file2.path}) 
>`)).join("\n\n");
    content = content.replace(/(%%quote\|\d%%).*(%%quote-end%%)/gs, "$1\n\n" + text + "\n\n $2");
    this.app.vault.modify(file, content);
  }
  pick(arr, n = 1) {
    if (n >= arr.length) {
      return arr;
    }
    let result = [];
    let picked = /* @__PURE__ */ new Set();
    for (let i = 0; i < n; i++) {
      let index = Math.floor(Math.random() * arr.length);
      while (picked.has(index)) {
        index = Math.floor(Math.random() * arr.length);
      }
      picked.add(index);
      result.push(arr[index]);
    }
    return result;
  }
  openFile(path) {
    return this.app.vault.getAbstractFileByPath(path);
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
/*! Bundled license information:

js-md5/src/md5.js:
  (**
   * [js-md5]{@link https://github.com/emn178/js-md5}
   *
   * @namespace md5
   * @version 0.8.3
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2014-2023
   * @license MIT
   *)
*/
//# sourceMappingURL=data:application/json;base64,
